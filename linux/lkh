#!/usr/bin/env bash
## SPDX-License-Identifier: GPL-2.0
# Copyright(c) Aakash Hemadri <aakashhemadri123@gmail.comr
#
# Usage:
#	lkh -h
#
# TODO:
# - Set type of config with getopts
# - Set outfile to be modifiable with a debug mode that switches from /dev/stdout to /dev/null

set -euo pipefail
IFS=$'\n\t'
{
	if [[ $EUID == 0 ]]; then
		echo "Please do not run as root"
		exit 1
	fi

	name=custom
	parameters="console=ttyS0 root=/dev/sda earlyprintk=serial net.ifnames=0 nokaslr kasan_multi_shot"
	debug=old
	ram=1G
	outfile="/dev/null"
	#outfile="/dev/null"
	debug_type=old
	debug_path="/opt/dmesg"
	threads=12

	_build() {
		# read -s -p "Enter password for sudo: " sudo_pass
		echo -e ">> Building kernel..."
		make -j${threads} all > ${outfile}
	}

_install() {
	echo ">> Installing modules..."
	sudo make -j${threads} modules_install > ${outfile}
	echo ">> Copying artifacts to /boot..."
	sudo cp -f arch/x86_64/boot/bzImage /boot/vmlinuz-linux-${name}
	sudo cp -f System.map /boot/
	echo ">> Generating initramfs..."
	sudo mkinitcpio -p linux-${name} > ${outfile}
	echo ">> Updating grub.cfg..."
	sudo grub-mkconfig -o /boot/grub/grub.cfg > ${outfile}
}

_config() {
	# Don't use this, every compile will likely be a little different.
	# Appending this with opening interactive menuconfig.
	#
	# `make help` for config targets

	#
	# Target for host machine
	#
	# zcat /proc/config.gz > .config
	# echo ">> Updated with /proc/config.gz"
	# make localmodconfig
	# make menuconfig

	#
	# Virtual KVM guest
	#
	# make defconfig
	# make kvm_guest.config
	# make menuconfig

	#
	# Will give the likeliest shortest compile time without breaking the config.
	# It's okay to spend the time configuring over waiting for huge compiles
	#
	# make allnoconfig
	# make menuconfig

	#
	# Similar to above but this will give the safest config with most of
	# your devices usable. You still have to configure the modules you need
	#
	make defconfig
	make menuconfig
}

_stat_config() {
	YES=`cat .config | grep =y | wc -l`
	NO=`cat .config | grep "is not set" | wc -l`
	MODULES=`cat .config | grep =m | wc -l`
	echo -e "Yes: $YES\nNo: $NO\nModules: $MODULES"
}

_clean() {
	make mrproper > ${outfile}
}

_debug() {
	sudo mkdir -p ${debug_path}/${debug_type}
	sudo chown -R ${USER}:$(id -gn) ${debug_path}/${debug_type}
	sudo dmesg -t > ${debug_path}/${debug_type}/current
	sudo dmesg -t -k > ${debug_path}/${debug_type}/kernel
	sudo dmesg -t -l emerg > ${debug_path}/${debug_type}/emerg
	sudo dmesg -t -l alert > ${debug_path}/${debug_type}/alert
	sudo dmesg -t -l crit > ${debug_path}/${debug_type}/crit
	sudo dmesg -t -l err > ${debug_path}/${debug_type}/err
	sudo dmesg -t -l warn > ${debug_path}/${debug_type}/warn
	echo "dmesg/old written to ${debug_path}/${debug_type}/*"
	if [[ "${debug_type}" == "new" ]]; then
		echo ">> Comparing diffs"
		diff -qrs ${debug_path}/old ${debug_path}/new
	fi
	exit 0
}

_kselftest() {
	make -j${theads} summary=1 kselftest ${outfile}
	echo "kselftest completed"
}

_suspend() {
	systemctl hibernate
	exit 0
}

_generate_mkinitcpio_preset() {
	# This is a arch linux specific function
	if [[ ${name} == custom ]]; then
		echo -e "Choose a custom preset name with -n <name"
	fi
}

_vm() {
	qemu-system-x86_64 \
		-m ${ram} \
		-smp 2 \
		-kernel /boot/vmlinuz-linux-${name} \
		-initrd /boot/initramfs-linux-${name}.img \
		-append ${parameters} \
		-net user,host=10.0.2.10,hostfwd=tcp:127.0.0.1:10021-:22 \
		-net nic,model=e1000 \
		-enable-kvm \
		-nographic \
		2>&1 | tee vm.log
	}

#
# Temporary function holding syzkaller setup
#
_syz_config() {
	make defconfig
	make kvm_guest.config
	cat >> .config <<EOF
# Coverage collection.
CONFIG_KCOV=y

# Debug info for symbolization.
CONFIG_DEBUG_INFO=y

# Memory bug detector
CONFIG_KASAN=y
CONFIG_KASAN_INLINE=y

# Required for Debian Stretch
CONFIG_CONFIGFS_FS=y
CONFIG_SECURITYFS=y
EOF
}

# 
# Test syzkaller vm
#
_syz_vm() {
	qemu-system-x86_64 \
		-m 2G \
		-smp 2 \
		-kernel arch/x86/boot/bzImage \
		-append ${parameters} \
		-drive file=$IMAGE/stretch.img,format=raw \
		-net user,host=10.0.2.10,hostfwd=tcp:127.0.0.1:10021-:22 \
		-net nic,model=e1000 \
		-enable-kvm \
		-nographic \
		-pidfile /tmp/vm.pid \
		2>&1 | tee vm.log
	}

#
# Print usage
#
_usage() {
	cat <<EOF
Usage: $0 [-n <name>] [-bidrtsh]
	-h, Display this help
	-o, Change outfile [default: /dev/null]
	-n, Set mkinitcpio preset name [default: custom]
	-c, Configure kernel
	-z, .config status
	-b, Build kernel
	-p, Create preset for mkinitcpio
	-i, Install kernel
	-d, Debug with dmesg
	-r, Run with qemu
	-t, Run kselftest
	-s, Suspend after jobs
EOF
exit 1
}

_main() {
	while getopts "o::n:czbpid:tqsh" arg; do
		case ${arg} in
			n)
				name=${OPTARG}
				;;
			o)
				outfile=${OPTARG}
				;;
			c)
				_config
				;;
			z)
				_stat_config
				;;
			b)
				_build
				;;
			p)
				_generate_mkinitcpio_preset
				;;
			i)
				_install
				;;
			d)
				debug_type=${OPTARG}
				_debug
				;;
			t)
				_kselftest
				;;
			q)
				_vm
				;;
			s)
				_suspend
				;;
			h)
				_usage
				;;
			*)
				_usage
				exit 1
				;;
		esac
	done
}

_main $@
exit 0
}
